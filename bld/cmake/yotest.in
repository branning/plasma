#!/bin/sh

usage() {
    cat << _EOF_

yotest: test harness to start/stop pool_tcp_server and run yovo unit tests.
(See README.md.
Usually invoked by 'ninja check', which runs 'ctest -V'.
See CMakeLists.txt's add_wrapped_test and CTestCustom.cmake.in.)

Usage:
  yotest start fixture   - start given fixture(s)
  yotest stop fixture    - stop given fixture(s)
  yotest killall         - stop all fixture-like things with extreme prejudice
  yotest run fixture cmd - run cmd against given fixture(s)
  yotest list            - list fixtures
Fixtures:
  local     - mmap pools
  tcp       - tcp pools
  tcps      - secure tcp pools with client certs
  tcpo      - opportunistically secure pools with anon ssl
  coverage  - special fixture just for start and stop
You may also specify a set of fixtures with
  all       - all of the above
  local;tcp - semicolon separated list of fixtures

Example session of descent from high level tools to lower level ones:
  # Build as usual (including extra steps for first run)
  cd ~/src/yovo
  ./baugen.sh -f
  bau install-deps
  sh cmakegen.sh -GNinja
  cd btmp
  ninja

  # Highest level: run all tests against all fixtures without knowing what's under the hood
  ninja check

  # Middle level: use the comfy, familiar ctest; it invokes yotest for you
  # List all tests
  ctest -N
  # Run just one test against all appropriate fixtures
  ctest -V -R bad_pool_name.sh

  # Lower level: use yotest to start a pool server and run a single test against it
  ./yotest start tcps
  ./yotest run tcps bad_pool_name.sh
  ./yotest stop tcps
  # Look at fixture (i.e. pool_tcp_server) log file
  cat yotest.d/tcps/pool_tcp_server.log

  # Lowest level: no wrappers.  This is the pain yotest saves you.
  # You may need to set environment variables first; see e.g.
  # source of yotest, source of test, output of fixture log,
  # and libPlasma/c/pool_cmd.c's pool_cmd_options_from_env() for ideas.
  # In this case, let's run a gtest binary instead of a shell script test.
  libPlasma/c/p-create blah
  libPlasma/c/pool_tcp_server &
  TEST_POOL=tcps://localhost/blah libPlasma/c/tests/MiscPoolTest
  killall pool_tcp_server
_EOF_
}

# Runs a test against the given fixture(s).
# Fixtures are global; start them before running any tests.
# Fixture $fix consists of environment variables, local files, and
# optionally a pool server, defined by files in bld/cmake/fixtures/$fix
#
# Normal workflow with cmake < 3.7:
# 'make check' does 'ctest -V', which does 'yotest start all',
# then loops over all tests doing 'yotest run name-of-test', then finishes
# with 'yotest stop all'.
#
# Alternate workflows:
# Simple: use 'ctest -V -R regexp' to run particular tests; this handles
#   fixtures for you
# Without ctest: if the test does not need tcp, just do
#   'yotest run testname' and don't worry about start/stop
# Without yotest: just run the test executable or script.
#   Some need environment variables (like PATH).
#   If they explode because of a missing variable, see what 'yotest run'
#   does, and steal from that.

# Coding style:
# - Environment variables are generally uppercase
# - Global shell variables which mirror cmake settings have same name
# - Other global shell variables are lowercase and start with yt_
# - Local variables are declared 'local', but
#   avoid setting value on same line.  See also
#     http://tldp.org/LDP/abs/html/localvar.html
# - Run 'shellcheck yotest.in' after each edit and make it pass,
#   but ignore any warnings about 'local' being nonportable; see
#     https://github.com/koalaman/shellcheck/issues/503

set -e

# Parameters from cmake (via configure_file)
ALL_BIN_DIRS_ABS_COLONSEP="@ALL_BIN_DIRS_ABS_COLONSEP@"
ASAN="@ASAN@"
abs_top_builddir="@abs_top_builddir@"
abs_top_srcdir="@abs_top_srcdir@"
COVERAGE="@COVERAGE@"
TSAN="@TSAN@"

# sigh.  ALL_BIN_DIRS_ABS_COLONSEP is already in cygwin-friendly form,
# but these two are not.
case "$abs_top_builddir" in
*:*) abs_top_builddir=$(cygpath $abs_top_builddir);;
esac
case "$abs_top_srcdir" in
*:*) abs_top_srcdir=$(cygpath $abs_top_srcdir);;
esac

# The test fixtures this script implements
yt_fixtures_srctop="$abs_top_srcdir"/bld/cmake/fixtures
yt_all_fixtures="$(ls "$yt_fixtures_srctop")"

# Remove /opt/oblong/g-speak* from PATH to avoid running against old installs
PATH="$(echo "$PATH" | tr : '\012' | grep -v /opt/oblong/g-speak | tr '\012' :)"
# Put all the directories containing just-built binaries on the PATH
PATH="${ALL_BIN_DIRS_ABS_COLONSEP}:${PATH}"
# Find the pool server binary
yt_poolserver=$(which pool_tcp_server)
# Test work area, created by start, deleted by stop
yt_dir="${abs_top_builddir}"/yotest.d

# how many seconds poolserver sleeps during shutdown
yt_cooldown=3

# Get shell and env vars for the given fixture type (call before start)
get_fixture_vars() {
    local fix
    fix=$1
    yt_fixture_src="$yt_fixtures_srctop"/$fix
    yt_fixture_log="$yt_dir"/$fix/pool_tcp_server.log
    yt_fixture_pidfile="$yt_dir"/$fix/pool_tcp_server-P.out.txt
    if test -d /cygdrive/c/windows
    then
      # yt_fixture_pidfile is passed to a native app
      yt_fixture_pidfile=$(cygpath -w $yt_fixture_pidfile)
    fi

    # Don't want to find any files in /etc/oblong during tests,
    # but do want to find this fixture's certificates.
    # On Windows, this variable has to be native, so this source tree's
    # test scripts should use the _SH variant.
    OB_ETC_PATH="$yt_fixture_src"
    export OB_ETC_PATH
    OB_POOLS_DIR="$yt_dir"/$fix/var/pools
    export OB_POOLS_DIR
    OB_ETC_PATH_SH="$OB_ETC_PATH"
    export OB_ETC_PATH_SH
    OB_POOLS_DIR_SH="$OB_POOLS_DIR"
    export OB_POOLS_DIR_SH
    if test -d /cygdrive/c/windows
    then
      OB_ETC_PATH="$(cygpath -w "$OB_ETC_PATH_SH")"
      OB_POOLS_DIR="$(cygpath -w "$OB_POOLS_DIR_SH")"
    fi
}

# Get info about the given running fixture
get_pid() {
    # duplicates yt_fixture_pidfile from get_fixture_vars
    awk '/pid:/ {print $2}' < "$yt_dir/$1"/pool_tcp_server-P.out.txt | tr -d '\015'
}
get_port() {
    # duplicates yt_fixture_pidfile from get_fixture_vars
    awk '/port:/ {print $2}' < "$yt_dir/$1"/pool_tcp_server-P.out.txt | tr -d '\015'
}

# Get test pool URL for the given fixture type; fixture must be running
get_url() {
    local fix
    fix=$1

    case "$fix" in
    local)
        echo "test_pool"
        return 0
        ;;
    tcp|tcps|tcpo)
        echo "$fix://localhost:$(get_port "$fix")/test_pool"
        return 0
        ;;
    esac

    echo "yotest: get_url: Unknown test fixture '$fix'" >&2
    # in case script doesn't die:
    echo "get_url:fatal-bad-fix-$fix"
    exit 1
}

# Return true (0) if cmake was called with -DCOVERAGE=ON, false (1) otherwise
built_for_coverage() {
    case "$(echo "$COVERAGE" | tr A-Z a-z)" in
    1|yes|on|true) return 0;;
    *) return 1;;
    esac
}

# Return true (0) if cmake was called with -DASAN=ON, false (1) otherwise
built_for_asan() {
    case "$(echo "$ASAN" | tr A-Z a-z)" in
    1|yes|on|true) return 0;;
    *) return 1;;
    esac
}

# Return true (0) if cmake was called with -DTSAN=ON, false (1) otherwise
built_for_tsan() {
    case "$(echo "$TSAN" | tr A-Z a-z)" in
    1|yes|on|true) return 0;;
    *) return 1;;
    esac
}

# Start a test fixture
# Usage: do_start fixturename
do_start() {
    local fix
    fix="$1"
    shift

    # special case fake 'coverage' fixture
    case "$fix" in
    coverage) "$abs_top_srcdir"/bld/cmake/coverage.sh start; return 0;;
    esac

    # Set shell and environment variables for this fixture
    get_fixture_vars "$fix"

    # Clean out and create this fixture's working directory
    rm -rf "${yt_dir:?}/$fix"
    mkdir -p "$OB_POOLS_DIR_SH"

    # Return early if this fixture does not need a pool server.
    if ! test -f "$yt_fixture_src"/poolserveropts.txt
    then
        return
    fi

    if built_for_coverage
    then
        # FIXME: exercise the help code, too, for that extra 4% coverage
        # in oss-common.c.
       "$yt_poolserver" -h
    fi

    # FIXME:
    # On windows, jump through hoops to get pool_tcp_server to run
    # in background; see libPlasma/c/fire-and-forget.c
    local yt_launcher
    case "$OS" in
    Windows_NT) yt_launcher=fire-and-forget; yt_poolserver="pool_tcp_server.exe";;
    *) yt_launcher="";;
    esac

    # Must redirect output or ctest waits for it to finish
    # shellcheck disable=SC2046
    if ! $yt_launcher "$yt_poolserver" \
        -P "$yt_fixture_pidfile" \
        -s $yt_cooldown \
        -v \
        $(cat "$yt_fixture_src"/poolserveropts.txt) \
        < /dev/null > "$yt_fixture_log" 2>&1
    then
        echo "yotest: error: failed to start $fix $yt_poolserver.  Log:"
        cat "$yt_fixture_log" || true
        exit 1
    fi
    # On Windows, can take longer than 1 second to start
    try=0
    while test $try -lt 3
    do
      if get_pid "$fix" > /dev/null 2>&1
      then
        break
      fi
      sleep 1
      try=$(expr $try + 1)
    done
    if ! get_pid "$fix"
    then
        echo "yotest: error: could not get pid for pool server for $fix"
        exit 1
    fi
    if test "$YT_VERBOSE" -gt 0
    then
      echo "yotest: Started $fix $yt_poolserver pid $(get_pid "$fix"), url $(get_url "$fix").  Log begins:"
      cat "$yt_fixture_log"
    fi
}

# Given a poolserver's pid, stop it gently, and wait for it to finish
kill_gently() {
    case "$OS" in
    Windows_NT)
        # FIXME: figure out gentle shutdown on windows, remove /F option
        taskkill /F /PID "$1";;
    *)
        # SIGTERM or SIGINT both cause pool_tcp_server to exit gracefully
        # and emit coverage info.
        kill -TERM "$1";;
    esac
    # FIXME: stop waiting as soon as it finishes rather than guessing
    sleep $yt_cooldown
    sleep 1
}

# Kill them all with fire
kill_all() {
    case "$OS" in
    Windows_NT)
        for pid in $(tasklist | awk '/pool_tcp_server/ {print $2}')
        do
           taskkill /F /PID "$pid"
        done
        ;;
    *)
        killall -TERM pool_tcp_server || true
        ;;
    esac
}

# Stop a test fixture
# Usage: do_stop fixturename
do_stop() {
    local fix
    fix="$1"
    shift

    # special case fake 'coverage' fixture
    case "$fix" in
    coverage) "$abs_top_srcdir"/bld/cmake/coverage.sh end; return 0;;
    esac

    get_fixture_vars "$fix"

    # Does this fixture need a pool server?
    if ! test -f "$yt_fixture_src"/poolserveropts.txt
    then
        return
    fi

    if ! pid=$(get_pid "$fix")
    then
        echo "yotest: error: failed to find pid for $fix $yt_poolserver"
        return
    fi

    echo "yotest: stopping fixture $fix"
    kill_gently "$pid"
    #echo "yotest: fixture $fix stopped; last few lines of ${yt_fixture_log}:"
    #tail "$yt_fixture_log"
}

# Set environment variables used by sanitizers
get_sanitizer_vars() {
    if built_for_tsan
    then
        # Thread sanitizer
        if test "$TSAN_OPTIONS" != ""
        then
            echo "yotest: warning: overriding TSAN_OPTIONS.  FIXME"
        fi
        # From https://github.com/google/sanitizers/wiki/ThreadSanitizerFlags
        # alphabetical order, please
        TSAN_OPTIONS="suppressions=$abs_top_srcdir/bld/cmake/tsan-suppressions.txt"
        export TSAN_OPTIONS
    elif built_for_asan
    then
        # ASAN implies leak sanitizer, too
        if test "$LSAN_OPTIONS" != ""
        then
            echo "yotest: warning: overriding LSAN_OPTIONS.  FIXME"
        fi
        # alphabetical order, please
        # note: verbosity=1 triggers a hang in matrix_test with asan on
        # i9-9900k, see bug #295
        LSAN_OPTIONS="print_suppressions=1:report_objects=1:verbosity=0:log_threads=1:suppressions=$abs_top_srcdir/bld/cmake/lsan-suppressions.txt"
        export LSAN_OPTIONS
        echo "yotest: LSAN_OPTIONS=$LSAN_OPTIONS"

        # Address sanitizer
        if test "$ASAN_OPTIONS" != ""
        then
            echo "yotest: warning: overriding ASAN_OPTIONS.  FIXME"
        fi
        # alphabetical order, please
        # Can't turn on check_initialization_order=1 or strict_init_order=1 yet,
        # as it flags reference counting for static slaws like A_NULL_SLAW
        ASAN_OPTIONS="check_initialization_order=0 detect_odr_violation=2 detect_stack_use_after_return=1 strict_init_order=0"
        export ASAN_OPTIONS

        # For tests that load a g-speak plugin into a prebuilt non-asan executable,
        # tell the test script where to find asan to preload it.
        # Currently only used by libPlasma/ruby/test-helpers.rb
        if test -f /etc/issue
        then
            # assume we want the latest... might fail if you install gcc8 on ubu1804 but are using gcc7?
            ASAN_PRELOAD=$(ls /usr/lib/$(dpkg-architecture -q DEB_TARGET_GNU_TYPE)/libasan.so.? | tail -n 1)
        elif test -d /Applications
        then
            ASAN_PRELOAD=$(find $(xcode-select -p) -name '*asan_osx_dynamic.dylib')
        else
            ASAN_PRELOAD=unknown-system-type
        fi
        if ! test -f $ASAN_PRELOAD
        then
            echo "yotest: error: cannot find asan library to preload"
            exit 1
        fi
        export ASAN_PRELOAD
    fi
}

do_run() {
    local fix
    fix=$1
    shift
    local cmd
    cmd=$1
    get_fixture_vars "$fix"

    # Every test gets a new scratch directory
    # This assumes we never want to run tests in parallel.
    rm -rf scratch
    mkdir scratch

    # Tell libPlasma/ruby/test-helpers.rb that it's always ok to run tests
    # FIXME: remove all references to this variable once we remove automake build?
    export OBLONG_YOVO_BUILD_TYPE=shared

    # Assume that test names are globally unique, and put each test's
    # output at the top of the fixture working directory, named after the test.
    local test_name
    test_name="$(echo "$cmd" | sed 's,.*/,,;s,\.*,,')"
    TEST_LOG="$yt_dir/$fix/$test_name".log
    export TEST_LOG

    # If this isn't a multiple of 4096, test-info fails
    export POOL_SIZE="1048576"
    export POOL_TOC_CAPACITY="50"
    export POOL_TYPE="mmap"   # note: this appears to be obsoleted by method from url?

    # OB_TEST_PROCTOR is only set when running tests, so our C++ code
    # can avoid doing things that screw up tests.  Only one thing uses it so far.
    OB_TEST_PROCTOR=YEP
    export OB_TEST_PROCTOR

    TEST_POOL="$(get_url "$fix")"
    export TEST_POOL

    case "$fix" in
    local)
        # some tests assume remote pool if this is set
        unset OBLONG_TEST_USE_POOL_TCP_SERVER
        ;;
    tcp*)
        # Some tests sense this to check for TCP pool type...
        # and if it's not identical to the one we just built,
        # assumes it's an archived old version!
        OBLONG_TEST_USE_POOL_TCP_SERVER="$yt_poolserver"
        export OBLONG_TEST_USE_POOL_TCP_SERVER

        # Get apps that try to use a local pool to fail
        OB_POOLS_DIR=/dev/null
        OB_POOLS_DIR_SH=/dev/null
        ;;
    *)
        echo "yotest: Unknown test fixture '$fix'"
        exit 1
    esac

    # In case this is an address or thread sanitizer run, set appropriate environment variables
    get_sanitizer_vars

    echo "yotest: run $test_name with pool $TEST_POOL"
    $cmd
}

#--- main program ---

# FIXME: make -v -v more useful
# FIXME: if BAU_VERBOSE > 0, default YT_VERBOSE to $BAU_VERBOSE - 1 ?
# FIXME: maybe use uniform BS_VERBOSE integer in all programs, and decrement on entry,
# so adding another -v exposes verbosity in next shell script down?
YT_VERBOSE=0

# Commands with no arguments
case "$1" in
list)
    echo "$yt_all_fixtures"
    exit 0
    ;;
killall)
    kill_all
    exit 0
    ;;
""|--help|-h)
    usage
    exit 0
    ;;
-v|--verbose)
    YT_VERBOSE=$(($YT_VERBOSE + 1))
    set -x
    shift
    ;;
esac

cmd="$1"
shift

# Remaining commands all take fixture as next arg, so handle that here
fixopts="$1"
coverage_too=""
case "$fixopts" in
all)
    # 'all' is shorthand for 'everything and coverage too',
    # it's how CTestCustom.cmake.in invokes start and stop.
    # (When we port to cmake 3.7, we may switch away from
    # CTestCustom to the finer-grained ctest fixtures feature,
    # at which point 'all' could go away.)
    fixopts="$yt_all_fixtures"
    if built_for_coverage
    then
        coverage_too="coverage"
    fi
    ;;
*";"*)
    # Accept semicolon-separated list of test fixtures
    fixopts="$(echo "$fixopts" | tr ';' ' ')"
    ;;
"") usage; exit 1;;
esac
shift

case "$cmd" in
start)
    for fixopt in $coverage_too $fixopts
    do
        do_start "$fixopt"
    done
    ;;
run)
    for fixopt in $fixopts
    do
        # loop will exit early on failure
        do_run "$fixopt" "$@"
    done
    ;;
stop)
    for fixopt in $fixopts $coverage_too
    do
        do_stop "$fixopt"
    done
    ;;
*)
    echo "yotest: Unrecognized command $cmd"
    usage
    exit 1
    ;;
esac
